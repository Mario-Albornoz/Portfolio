/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Leon_dp (https://sketchfab.com/leondp)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lighthouse-at-portal-crossroads-66006d9a3e93417fa52f2c588e7df924
Title: Lighthouse at portal crossroads
*/

import { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three'

import lighthouseScene from '../assets/3d/lighthouse.glb';

export const rotationSpeed = { current: 0 };

const Lighthouse = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const lighthouseRef = useRef()

  const { gl, viewport } = useThree();
  const { nodes, materials, animations } = useGLTF(lighthouseScene);
  
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  /**this controls how fast the screen roates and for how long after the intial release */
  const dampingFactor = 0.95;

  /**functions for clicking and realsing the mouse */
  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating (true);
    /** figure out if it is a touch in a phone or a click in a computer */
    const clientX = e.touches ? e.thouche[0] : e.clientX

    lastX.current = clientX 
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating (false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating) {
      const clientX = e.touches ? e.thouches[0] : e.clientX
      /**calculate change on the client positon */
      const delta = (clientX - lastX.current) / viewport.width;
  
      lighthouseRef.current.rotation.y += delta * 0.01 * Math.PI;
      /** Update reference for the last client exposition */
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    } 
  }


/**hook that applies to every single frame for the rotation */
  useFrame (() => {
    if(!isRotating){
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      lighthouseRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = lighthouseRef.current.rotation.y;

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the lighthouse's orientation
      switch (true) {
        case normalizedRotation >= 5.75 && normalizedRotation <= 6.1:
          setCurrentStage(1);
          break;
        case normalizedRotation >= 0.92 && normalizedRotation <= 1.5:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 2.6 && normalizedRotation <= 3.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(2);
          break;
        default:
          setCurrentStage(null);
      }
    }
  })

  useEffect (() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);

    
    return () =>{
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);

    }
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);
  return (
    <a.group ref={lighthouseRef} {...props}>
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          
          rotation={[-Math.PI, 1.57, 0]}>
          <group
            name="e27d494cd76c4dd19426c7bf9852b6fafbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.012}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="land" position={[0,0,0]} scale={100}>
                  <mesh
                    name="land_facade_1_0"
                    geometry={nodes.land_facade_1_0.geometry}
                    material={materials.facade_1}
                  />
                  <mesh
                    name="land_road_0"
                    geometry={nodes.land_road_0.geometry}
                    material={materials.road}
                  />
                  <mesh
                    name="land_wood_1_0"
                    geometry={nodes.land_wood_1_0.geometry}
                    material={materials.wood_1}
                  />
                  <mesh
                    name="land_metal_1_0"
                    geometry={nodes.land_metal_1_0.geometry}
                    material={materials.metal_1}
                  />
                  <mesh
                    name="land_light_1_0"
                    geometry={nodes.land_light_1_0.geometry}
                    material={materials.light_1}
                  />
                  <mesh
                    name="land_light_2_0"
                    geometry={nodes.land_light_2_0.geometry}
                    material={materials.light_2}
                  />
                  <mesh
                    name="land_wood_2_0"
                    geometry={nodes.land_wood_2_0.geometry}
                    material={materials.wood_2}
                  />
                  <mesh
                    name="land_ground_0"
                    geometry={nodes.land_ground_0.geometry}
                    material={materials.ground}
                  />
                  <mesh
                    name="land_stone_0"
                    geometry={nodes.land_stone_0.geometry}
                    material={materials.stone}
                  />
                  <mesh
                    name="land_rock_0"
                    geometry={nodes.land_rock_0.geometry}
                    material={materials.rock}
                  />
                  <mesh
                    name="land_glade_0"
                    geometry={nodes.land_glade_0.geometry}
                    material={materials.glade}
                  />
                  <mesh
                    name="land_dark_0"
                    geometry={nodes.land_dark_0.geometry}
                    material={materials.dark}
                  />
                  <mesh
                    name="land_roof_0"
                    geometry={nodes.land_roof_0.geometry}
                    material={materials.roof}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
  )
}

export default Lighthouse;